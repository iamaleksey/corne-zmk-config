#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/*
 *  ╭────────────────────────┬────────────────────────╮
 *  │  0   1   2   3   4   5 │  6   7   8   9  10  11 │
 *  │ 12  13  14  15  16  17 │ 18  19  20  21  22  23 │
 *  │ 24  25  26  27  28  29 │ 30  31  32  33  34  35 │
 *  ╰───────────╮ 36  37  38 │ 39  40  41 ╭───────────╯
 *              ╰────────────┴────────────╯
 */

#define LHS 0  1  2  3  4  5  \
            12 13 14 15 16 17 \
            24 25 26 27 28 29
#define RHS 6  7  8  9  10 11 \
            18 19 20 21 22 23 \
            30 31 32 33 34 35
#define TMB 36 37 38 39 40 41

#define DEFINE_HRM(_label, _name, _hold, _tap, _triggers, ...)  \
    _label: _name {                                             \
      compatible = "zmk,behavior-hold-tap";                     \
      #binding-cells = <2>;                                     \
      flavor = "balanced";                                      \
      tapping-term-ms = <200>;                                  \
      quick-tap-ms = <175>;                                     \
      bindings = <_hold>, <_tap>;                               \
      hold-trigger-key-positions = <_triggers>;                 \
      hold-trigger-on-release;                                  \
      __VA_ARGS__                                               \
    }

#define ___ &none

#define BASE 0
#define NUM  1
#define SYM  2
#define NAV  3

#define HYPER LS(LA(LC(LCMD)))

#define LCTRL_A &hml LCTRL A
#define LALT_R  &hml LALT  R
#define LCMD_S  &hml LCMD  S
#define LSHFT_T &hsl LSHFT T
#define HYPER_D &hml HYPER D

#define HYPER_H &hmr HYPER H
#define RSHFT_N &hsr RSHFT N
#define RCMD_E  &hmr RCMD  E
#define RALT_I  &hmr RALT  I
#define RCTRL_O &hmr RCTRL O

#define NUM_TAB   &lt NUM TAB
#define SYM_SPACE &lt SYM SPACE
#define NAV_RET   &lt NAV RET

&lt {
    flavor = "balanced";
    tapping-term-ms = <175>;
};

&caps_word {
    continue-list = <UNDER MINUS BSPC DEL>;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            bindings = <&kp ESC>;
            key-positions = <2 3>;
            layers = <BASE>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_bspc {
            bindings = <&kp BSPC>;
            key-positions = <8 9>;
            layers = <BASE>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_caps_word {
            bindings = <&caps_word>;
            key-positions = <26 27>;
            layers = <BASE>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_ret {
            bindings = <&kp RET>;
            key-positions = <32 33>;
            layers = <BASE>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_mute {
            bindings = <&kp C_MUTE>;
            key-positions = <3 4>;
            layers = <NAV>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };

        combo_bt_clr {
            bindings = <&bt BT_CLR>;
            key-positions = <25 26>;
            layers = <NAV>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            display-name = "base";
            bindings = <
    ___ &kp Q        &kp W        &kp F        &kp P        &kp B        &kp J     &kp L        &kp U      &kp Y        &kp SEMI ___
    ___ LCTRL_A      LALT_R       LCMD_S       LSHFT_T      &kp G        &kp M     RSHFT_N      RCMD_E     RALT_I       RCTRL_O  ___
    ___ &kp Z        &kp X        &kp C        HYPER_D      &kp V        &kp K     HYPER_H      &kp COMMA  &kp DOT      &kp FSLH ___
                                  ___          NUM_TAB      SYM_SPACE    SYM_SPACE NAV_RET      ___
            >;
        };

        num_layer {
            display-name = "num";
            bindings = <
    ___ &kp F1       &kp F2       &kp F3       &kp F4       ___          ___       &kp N1       &kp N2     &kp N3       ___      ___
    ___ &kp F5       &kp F6       &kp F7       &kp F8       ___          ___       &kp N4       &kp N5     &kp N6       &kp N0   ___
    ___ &kp F9       &kp F10      &kp F11      &kp F12      ___          ___       &kp N7       &kp N8     &kp N9       ___      ___
                                  ___          ___          ___          SYM_SPACE NAV_RET      ___
            >;
        };

        sym_layer {
            display-name = "sym";
            bindings = <
    ___ &kp TILDE    &kp CARET    &kp AMPS     &kp PIPE     ___          ___       &kp UNDER    &kp EXCL   &kp DLLR     &kp AT   ___
    ___ &kp STAR     &kp PLUS     &kp LPAR     &kp RPAR     ___          ___       &kp MINUS    &kp EQUAL  &kp DQT      &kp SQT  ___
    ___ &kp HASH     &kp PRCNT    &kp LBRC     &kp RBRC     ___          ___       &kp LBKT     &kp RBKT   &kp GRAVE    &kp BSLH ___
                                  ___          ___          ___          ___       NAV_RET      ___
            >;
        };

        nav_layer {
            display-name = "nav";
            bindings = <
    ___ &kp C_BRI_DN &kp C_BRI_UP &kp C_VOL_DN &kp C_VOL_UP ___          &kp PG_UP &kp HOME     &kp UP     &kp END      &kp DEL  ___
    ___ &kp LCTRL    &kp LALT     &kp LCMD     &kp LSHFT    ___          &kp PG_DN &kp LEFT     &kp DOWN   &kp RIGHT    &kp BSPC ___
    ___ &bt BT_SEL 0 &bt BT_SEL 1 ___          &kp HYPER    ___          ___       &kp C_PREV   &kp C_PP   &kp C_NEXT   ___      ___
                                  ___          NUM_TAB      SYM_SPACE    ___       ___          ___
            >;
        };
    };

    behaviors {
        // homerow mods that are NOT the shift key
        DEFINE_HRM(hml, home_row_mod_left, &kp, &kp, RHS TMB,
            require-prior-idle-ms = <100>;
        );

        DEFINE_HRM(hmr, home_row_mod_right, &kp, &kp, LHS TMB,
            require-prior-idle-ms = <100>;
        );

        // homerow mods that ARE the shift key
        DEFINE_HRM(hsl, home_row_mod_for_shift_left, &kp, &kp, RHS TMB);
        DEFINE_HRM(hsr, home_row_mod_for_shift_right, &kp, &kp, LHS TMB);
    };
};
